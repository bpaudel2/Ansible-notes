{\rtf1\ansi\ansicpg1252\deff0\nouicompat\deflang1033{\fonttbl{\f0\fnil\fcharset0 Calibri;}{\f1\fnil\fcharset2 Symbol;}}
{\*\generator Riched20 10.0.17134}\viewkind4\uc1 
\pard\sa200\sl276\slmult1\f0\fs22\lang9 ANSIBLE:\par
It is an automation engine that allows for agentless system configuration and deployment. Ansible operates over SSH and runs Ansible modules on remote systems in order to complete tasks. Ansible is typically installed on a single, lightweight control node where a list of host inventory files, as well as playbooks are kept.\par
The heavy lifting is generally performed on the remote host as that is where Ansible Modules are executed. \par
In order to install Ansible, you must configure the EPEL (Extra Package for Enterprise Linux) repository on your system.\par
Once the EPEL repository is configured, your package manager installs Ansible and manages the dependencies. \par
sudo yum install ansible\par
sudo yum install git //also install git\par
\par
CONFIGURATION FILES:\par
/etc/ansible/ansible.cfg is the primary Ansible configuration file. Notable configurations include: default inventory configuration, default remote user\par
/etc/ansible/hosts is the default Ansible Inventory File. \par
An inventory is a list of hosts that Ansible manages.\par
Inventory location may be specified as follows:\par

\pard{\pntext\f1\'B7\tab}{\*\pn\pnlvlblt\pnf1\pnindent0{\pntxtb\'B7}}\fi-360\li720\sa200\sl276\slmult1\-\-Default: /etc/ansible/hosts\par
{\pntext\f1\'B7\tab}Specified by CLI: ansible -i\par
{\pntext\f1\'B7\tab}can be set in ansible.cfg\par

\pard\sa200\sl276\slmult1 An example of ansible is down below:\par
\tab\i mail.example.com ansible_port=5566\par
\par
\tab [webservers]\par
\tab httpd1.example.com\par
\tab httpd2.example.com\par
\tab\par
\tab [labservers]\par
\tab lab[01:99]\par
\par
\i0 SSH CONISDERATIONS:\par
Where it is possible to connect to remote host with Ansible via password authentication using -k (lowercase), it is not common practice as it can cause significant overhead in terms of manual intervention\par
Ansible is best implemented using a common user across all Ansible controlled systems.\par
The ssh-keygen and ssh-copy-id command can facilitate creating a pre-shared key for user authentication.\par
/etc/sudeors may be edited to allow your selected user to sudo any command without a password for the most automated configuration using the line\par
ansible ALL=(ALL) NOPASSWD: ALL\par
It is also possible to prompt for a sudo password at runtime using -K(uppercase) if desired. Note that this can become a challenge when executing against many system.\par
\par
\par
DOCUMENTATION:\par
docs.ansible.com \par
A module index is provided at docs.ansible.com as well. It contains detailed information over each module.\par
Ansible ships with the ansible-doc command as well. The command\par

\pard{\pntext\f1\'B7\tab}{\*\pn\pnlvlblt\pnf1\pnindent0{\pntxtb\'B7}}\fi-360\li720\sa200\sl276\slmult1 specifies a module name as a parameter and provides module specific documentation.\i\par
{\pntext\f1\'B7\tab}\i0 combined with -1 flag lists installed modules with a brief description.\i\par

\pard\sa200\sl276\slmult1\i0 AD-HOC:\par
Ansible ad-hoc commands and comparable to bash commands. Playbooks are analogous to bash script.\par
Syntax: ansible <HOST> -b -m <MODULE> -a "<ARG1 ARG2 ARGN>"\par
HOST is host or host group defined in the Ansible inventory file. -b is for become, which replaces depreciated -s flag as in sudo\par
Ansible escalates permission to --become-user(default root) using the method defined by --become-method(default sudo)\par
-m is for module and allows a command to be used on a module.\par
-a allows parameters to pass. If used without a module, it is like running a shell command on the target system(s). \par
COMMON MODULES.\par
ping\par
setup\par
yum "name=<NAME> state=<STATE>"\par
service "name=<NAME> state=<STATE>"\par
copy "src=<SOURCE_PATH>/\par
dest=<ABSOLUTE_DESTINATION_PATH>"\par
\par
PLAYBOOKS:\line Ansible playbooks are the primary means for Ansible to perform tasks.\par
Basic Ansible Playbook Structure\par
As ad-hoc commands are to bash commands, playbooks are to bash scripts. Playbooks run using the ansible-playbook command, not the ansible command. You must specify playbook to run as a parameter. \par
Playbooks are written in YAML. Playbooks contain different elements called plays. Plays contain lists of hosts and, at minimum, one task. Each task has a name and module. Modules may have parameters. Pro tip: Spaces matter. Improper indentation can cause a playbook to err in a vague way. \par
SAMPLE PLAYBOOK\par
\i ---\par
- hosts: webservers\par
 become: yes\par
tasks:\par
- name: latest httpd installed\par
 yum:\par
\tab name: httpd\par
\tab state: latest\par
- nam: write apache config file\par
 template:\par
\tab src: /srv/httpd.j2\par
\tab dest: /etc/httpd.conf\par
- hosts: database\par
remote_user: root\par
tasks:\par
- name: latest postgresql installed\par
 yum: \par
\tab name: postgresql\par
\tab state: latest\par
- name: postgresql must be started\par
 service: \par
\tab name: postgresql\par
\tab state: started\par
\i0 ADDITIONAL NOTES ON ANSIBLE PLAYBOOKS:\par
Check mode provides a quick sanity check:\par

\pard{\pntext\f1\'B7\tab}{\*\pn\pnlvlblt\pnf1\pnindent0{\pntxtb\'B7}}\fi-360\li720\sa200\sl276\slmult1 Dry run; does not actully affect systems\i\par
{\pntext\f1\'B7\tab}\i0 Syntax: ansible-playbook foo.yml --check\i\par

\pard\sa200\sl276\slmult1\i0 Retry file:\par

\pard{\pntext\f1\'B7\tab}{\*\pn\pnlvlblt\pnf1\pnindent0{\pntxtb\'B7}}\fi-360\li720\sa200\sl276\slmult1 If playbook fails, a retry file is generated and contains the list of hosts where the playbook failed: playbook-name.retry\i\par
{\pntext\f1\'B7\tab}\i0 The file may be specified using --limit with the same playbook to reattempt the playbook at a later time.\i\par

\pard\sa200\sl276\slmult1\i0\par
VARIABLES:\par
Varaibles names should be letters, numbers and underscores. They should always start with a letter. Variables can be scoped by a group, host, or within a playbook. Variables may be passed in via command line using the --extra-vars, the -e flag, or defined within a playbook.\par
CLI Example:\par
ansible-playbook service.yml -e \\ "target_hosts=localhost \\ target_service=httpd":\par
Variables are referenced using double curly braces. It is good practice to wrap variables names in weak quotes:\par
hosts: "\{\{my_host_var\}\}"\par
Example: \par
\i hosts: webservers\par
become: yes\par
vars: \par
\tab target_service: httpd\par
\tab target_state: started\par
tasks:\par
\tab -name: Ensure target state\par
\tab service:\par
\tab\tab name: "\{\{target_service\}\}"\par
\tab\tab state: "\{\{target_state\}\}"\par
\par
\i0 FACTS:\par
Ansible facts are simply various properties regarding a given remote system. The setup modeule can retrieve facts. The fileter parameter takes regex to allow you to prune fact output. Facts are gathered by default in the Ansible Playbook execution. The keyword gather_facts may be set in the playbook to change fact gathering behavior. It is possible to print Ansible facts in files using variables. Facts may be filtered using the setup module ad-hoc by passing a value for the filter parameter. The ansible command output may be directed to a file using --tree outputfile flag which may be helpful when working with facts.\par
It is possible to use \{\{ansible_facts\}\} for conditional plays based on facts. \par
\par
TROUBLESHOOTING:\par
The debug module may be used to help troubleshoot plays:\par

\pard{\pntext\f1\'B7\tab}{\*\pn\pnlvlblt\pnf1\pnindent0{\pntxtb\'B7}}\fi-360\li720\sa200\sl276\slmult1 use to print detail information about in-progress plays\i\par
{\pntext\f1\'B7\tab}\i0 handy for troubleshooting\i\par

\pard\sa200\sl276\slmult1\i0 Debug takes two primary parameters that are mutually exclusive. \par

\pard{\pntext\f1\'B7\tab}{\*\pn\pnlvlblt\pnf1\pnindent0{\pntxtb\'B7}}\fi-360\li720\sa200\sl276\slmult1 msg: a message that is printed to STDOUT\i\par
{\pntext\f1\'B7\tab}\i0 var: a variable whose content is printed to STDOUT\i\par

\pard\sa200\sl276\slmult1\i0 Example:\line\i - debug:\par
\tab msg: "System \{\{inventory_hostname\}\} has uuid \{\{ansible_product_uuid\}\}"\par
\i0 The register module is used to store task output. Several attributes are available: retrun code, stderr, and stdout. \par
The following play will store the results of the shell module in a variable named motd_contents:\par
\i\tab -hosts: all\par
\tab tasks:\par
\tab - shell: cat /etc/motd\par
\tab register: motd_contents\par
\i0\par
HANDLERS:\par
Ansible provides a mechanism that allows an action to be flagged for execution when a task performs a change. By only executing certain tasks during a chnage, plays are more effecient.\par
This mechanism is known as a handler in Ansible. A handler may be called using notify keyword:\par
\i -name: template configuration file\par
template:\par
\tab src: foo.conf\par
\tab dest: /etc/foo.conf\par
notify:\par
\tab -restart mecached\par
\i0 No matter how many times a handler is flagged in a play, it only runs during a play's final phase. notify will only flag a handler if a task block makes changes.\par
A handler may be defined similarly to task:\par
handlers:\par
\tab - name: restart memcached\par
\tab service:\par
\tab\tab name: memached\par
\tab\tab state: restarted\par
\tab listen: "restart cache services"\par
\i\par
\par
\tab\par
\tab\i0\par
}
 